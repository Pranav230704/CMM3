# -*- coding: utf-8 -*-
"""
Created on Wed Oct  9 11:25:14 2024

@author: Raymond M Rothschild
"""
import numpy as np
import yaml
from scipy.optimize import curve_fit
from datetime import datetime
from meteostat import Point, Hourly
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

# Define the location (Edinburgh: 55.9533° N, 3.1883° W)
location = Point(55.9533, -3.1883)
# Set the time period for data retrieval
start = datetime(2023, 1, 1, 0) # Start time
end = datetime(2023, 1, 2, 0) # End time (24-hour period)
# Fetch hourly temperature data
data = Hourly(location, start, end)
data = data.fetch()
T_amb_list = data['temp'].tolist()

# Open COP yaml file
file_path1 = r'/Users/aydannevzat1/Desktop/heat_pump_cop_synthetic_full.yaml'
with open(file_path1,'r') as file:
    cop_yaml = yaml.safe_load(file)

# Extract data from yaml file
cop_temp = []
cop_cop = []
for i in cop_yaml['heat_pump_cop_data']:
    cop_temp.append(i['outdoor_temp_C'])
    cop_cop.append(i['COP_noisy'])

class Heat_system:
    def __init__(self, Aw, Uw, Ar, Ur, T_amb_list, T_sp, U_cond, T_cond, U_tank, A_tank, c_t):
        self.Aw = Aw
        self.Uw = Uw
        self.Ar = Ar
        self.Ur = Ur
        self.T_amb_list = T_amb_list
        self.T_sp = T_sp
        self.U_cond = U_cond
        self.T_cond = T_cond
        self.U_tank = U_tank
        self.A_tank = A_tank
        self.c_t = c_t
        self.pump_on = False
        self.real_cop = []  # Store calculated COP values for averaging
        self.cop_values = []  # Store COP values at t_eval points

    def Q_load(self):
        Q_loads = []
        for Tamb in self.T_amb_list:
            Q_load = (self.Aw * self.Uw * (Tamb + 273 - self.T_sp) + self.Ar * self.Ur * (Tamb + 273 - self.T_sp)) * -1
            Q_loads.append(Q_load)
        return Q_loads

    # COP function based on curve fitting
    def cop(self, T_amb, a, b):
        delta_T = 60 - T_amb
        return a + b / delta_T

    # Fit COP parameters using the provided data once
    popt, pcov = curve_fit(lambda T, a, b: a + b / (60 - T), cop_temp, cop_cop)
    a, b = popt  # Obtained parameters for COP calculation

    def Q_hp(self, T_tank, T_amb):
        if T_tank >= 60 + 273.15:
            self.pump_on = False
        elif T_tank <= 40 + 273.15:
            self.pump_on = True

        if self.pump_on:
            
            return 1.11 * (self.U_cond * (self.T_cond - T_tank))
        else:
            return 0

    def tank_temperature_ode(self, t, T_tank):
        T_amb = np.interp(t, np.linspace(0, 86400, len(self.T_amb_list)), self.T_amb_list)
        Load = np.interp(t, np.linspace(0, 86400, len(self.Q_load())), self.Q_load())
        Q_hp = self.Q_hp(T_tank, T_amb)
        Q_loss = self.U_tank * self.A_tank * (T_tank - T_amb)
        
        dTdt = (Q_hp - Load - Q_loss[0]) / self.c_t
        return dTdt

    def solve_tank_temperature(self, initial_tank_temp, total_time=86400, time_points=1000):
        t_eval = np.linspace(0, total_time, time_points)
        
        # Interpolate T_amb_list to match the evaluation points
        T_amb_interpolated = np.interp(t_eval, np.linspace(0, 86400, len(self.T_amb_list)), self.T_amb_list)

        # Solve ODE at specified evaluation points
        solution = solve_ivp(self.tank_temperature_ode, [0, total_time], [initial_tank_temp], t_eval=t_eval, method="RK45", max_step=100)

        # Calculate COP at each t_eval point based on T_amb
        self.cop_values = [self.cop(T_amb, self.a, self.b) for T_amb in T_amb_interpolated]

        # Calculate total energy consumption
        Q_hp_values = [self.Q_hp(T_tank, T_amb) for T_tank, T_amb in zip(solution.y[0], T_amb_interpolated)]
        Q_hp_total = np.trapz(Q_hp_values, solution.t)  # Total energy consumption
        
        # Calculate average COP
        avg_cop = np.mean(self.real_cop) if self.real_cop else 0  # Average COP

        T_tank_values = solution.y[0] - 273.15  # Convert tank temperature to Celsius
        time_values = solution.t

        return time_values, T_tank_values, Q_hp_total, avg_cop

def main():
    # Set parameters for a particular building configuration (e.g., House A)
    Aw = 85  # Wall area (m²)
    Uw = 0.40  # Wall U-value (W/m²K)
    Ar = 80  # Roof area (m²)
    Ur = 0.15  # Roof U-value (W/m²K)
    T_sp = 288.15  # Indoor setpoint temperature (K)
    U_cond = 300  # Condenser heat transfer coefficient (W/m²K)
    T_cond = 343.15  # Condenser temperature (K)
    U_tank = 5  # Tank heat loss coefficient (W/K)
    A_tank = 1  # Tank heat transfer area (m²)
    c_t = 837200  # Thermal capacity of the tank (J/K)

    # Initialize heat system with given parameters
    heat_system = Heat_system(Aw, Uw, Ar, Ur, T_amb_list, T_sp, U_cond, T_cond, U_tank, A_tank, c_t)

    # Solve ODE and retrieve results
    initial_tank_temp = 45 + 273.15  # Initial tank temperature (45°C)
    time_values, T_tank_values, Q_hp_total, avg_cop = heat_system.solve_tank_temperature(initial_tank_temp)

    # Print performance metrics
    print(f"Total Energy Consumption (Q_hp_total): {Q_hp_total} J")

    # Plot Tank Temperature
    plt.figure(figsize=(12, 6))
    plt.plot(time_values / 3600, T_tank_values, label='Tank Temperature (°C)')
    plt.axhline(y=40, color='b', linestyle='--', label='Lower threshold (40°C)')
    plt.axhline(y=60, color='r', linestyle='--', label='Upper threshold (60°C)')
    plt.xlabel('Time (hours)')
    plt.ylabel('Tank Temperature (°C)')
    plt.title('Tank Temperature Over Time')
    plt.legend()
    plt.grid(True)
    plt.show()

    # Plot COP over Time
    plt.figure(figsize=(12, 6))
    plt.plot(time_values / 3600, heat_system.cop_values, label='COP', color='purple')
    plt.xlabel('Time (hours)')
    plt.ylabel('COP')
    plt.title('Coefficient of Performance (COP) Over Time')
    plt.legend()
    plt.grid(True)
    plt.show()

if __name__ == "__main__":
    main()
