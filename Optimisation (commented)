import numpy as np
import yaml
from scipy.optimize import curve_fit, differential_evolution
from datetime import datetime
from meteostat import Point, Hourly
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

# define the location (update this for each house type; currently set to Cape Town)
location = Point(-33.9249, 18.4241)  # coordinates for Cape Town

# set the time period for data retrieval (one-day period in this example)
start = datetime(2023, 1, 1, 0)  # start time
end = datetime(2023, 1, 2, 0)    # end time (24-hour period)

# fetch hourly temperature data from Meteostat
data = Hourly(location, start, end)
data = data.fetch()
T_amb_list = data['temp'].tolist()  # list of ambient temperatures

# open the yaml file containing COP data for the heat pump
file_path1 = r'/Users/aydannevzat1/Desktop/heat_pump_cop_synthetic_full.yaml'
with open(file_path1, 'r') as file:
    cop_yaml = yaml.safe_load(file)

# extract temperature and COP data from the yaml file
cop_temp = []
cop_cop = []
for i in cop_yaml['heat_pump_cop_data']:
    cop_temp.append(i['outdoor_temp_C'])  # temperatures
    cop_cop.append(i['COP_noisy'])        # COP values

# define the Heat_system class, which represents the heat pump system
class Heat_system:
    def __init__(self, Aw, Uw, Ar, Ur, T_amb_list, T_sp, U_cond, T_cond, U_tank, A_tank, c_t):
        # system parameters and initial states
        self.Aw = Aw                  # wall area
        self.Uw = Uw                  # wall U-value (heat transfer coefficient)
        self.Ar = Ar                  # roof area
        self.Ur = Ur                  # roof U-value
        self.T_amb_list = T_amb_list  # list of ambient temperatures over time
        self.T_sp = T_sp              # target setpoint temperature
        self.U_cond = U_cond          # condenser heat transfer coefficient
        self.T_cond = T_cond          # condenser temperature
        self.U_tank = U_tank          # tank heat loss coefficient
        self.A_tank = A_tank          # tank area
        self.c_t = c_t                # thermal capacity of the tank
        self.pump_on = False          # flag to indicate if the pump is on
        self.real_cop = []            # stores calculated COP values for averaging
        self.cop_values = []          # COP values at t_eval points

    # function to calculate heating load for each ambient temperature
    def Q_load(self):
        Q_loads = []
        for Tamb in self.T_amb_list:
            # calculate the heat load based on wall and roof areas and U-values
            Q_load = (self.Aw * self.Uw * (Tamb + 273 - self.T_sp) + self.Ar * self.Ur * (Tamb + 273 - self.T_sp)) * -1
            Q_loads.append(Q_load)
        return Q_loads

    # COP function based on fitted curve parameters
    def cop(self, T_amb, a, b):
        delta_T = 60 - T_amb
        return a + b / delta_T

    # fit COP parameters once using data from the yaml file
    popt, pcov = curve_fit(lambda T, a, b: a + b / (60 - T), cop_temp, cop_cop)
    a, b = popt  # store the parameters from curve fitting for later use

    # function to calculate the heat pump's output heat based on tank temperature
    def Q_hp(self, T_tank, T_amb):
        # control logic for turning the pump on and off
        if T_tank >= 60 + 273.15:   # if tank is at or above 60°C, turn off pump
            self.pump_on = False
        elif T_tank <= 40 + 273.15: # if tank is at or below 40°C, turn on pump
            self.pump_on = True

        # calculate heat produced by heat pump if it's on
        if self.pump_on:
            return 1.11 * (self.U_cond * (self.T_cond - T_tank))
        else:
            return 0  # no heat if pump is off

    # function to define the differential equation for the tank temperature over time
    def tank_temperature_ode(self, t, T_tank):
        # interpolate ambient temperature and load for each time step
        T_amb = np.interp(t, np.linspace(0, 86400, len(self.T_amb_list)), self.T_amb_list)
        Load = np.interp(t, np.linspace(0, 86400, len(self.Q_load())), self.Q_load())
        Q_hp = self.Q_hp(T_tank, T_amb)
        Q_loss = self.U_tank * self.A_tank * (T_tank - T_amb)
        
        # calculate rate of temperature change (dT/dt)
        dTdt = (Q_hp - Load - Q_loss) / self.c_t
        return dTdt

    # function to solve the temperature of the tank over a specified time period
    def solve_tank_temperature(self, initial_tank_temp, total_time=86400, time_points=1000):
        t_eval = np.linspace(0, total_time, time_points)  # time evaluation points for ODE solution
        
        # interpolate ambient temperature over time points
        T_amb_interpolated = np.interp(t_eval, np.linspace(0, 86400, len(self.T_amb_list)), self.T_amb_list)

        # solve the differential equation for tank temperature
        solution = solve_ivp(self.tank_temperature_ode, [0, total_time], [initial_tank_temp], t_eval=t_eval, method="RK45", max_step=100)

        # calculate COP at each time evaluation point based on ambient temperature
        self.cop_values = [self.cop(T_amb, self.a, self.b) for T_amb in T_amb_interpolated]

        # calculate total energy consumption of the heat pump
        Q_hp_values = [self.Q_hp(T_tank, T_amb) for T_tank, T_amb in zip(solution.y[0], T_amb_interpolated)]
        Q_hp_total = np.trapz(Q_hp_values, solution.t)  # total energy consumed by the pump
        
        # calculate average COP
        avg_cop = np.mean(self.real_cop) if self.real_cop else 0  # average COP if any values exist

        # convert tank temperature to Celsius for output
        T_tank_values = solution.y[0] - 273.15
        time_values = solution.t

        return time_values, T_tank_values, Q_hp_total, avg_cop

# objective function for optimisation, minimises total energy consumption
def objective_function(params):
    A_w, U_w, A_r, U_r, T_sp, A_tank, U_tank, U_cond = params
    heat_system = Heat_system(A_w, U_w, A_r, U_r, T_amb_list, T_sp, U_cond, T_cond, U_tank, A_tank, c_t)
    
    # run the simulation with the given parameters
    _, _, total_energy, avg_cop = heat_system.solve_tank_temperature(initial_tank_temp)
    return total_energy  # minimise total energy consumption

def main():
    # define parameter bounds for each variable
    bounds = [
        (85, 180),    # A_w: wall area in m²
        (0.4, 0.8),   # U_w: wall U-value (heat transfer coefficient)
        (80, 160),    # A_r: roof area in m²
        (0.15, 0.3),  # U_r: roof U-value
        (288.15, 303.15), # T_sp: setpoint temperature in Kelvin
        (0.6, 1.4),   # A_tank: tank area in m²
        (2, 10),      # U_tank: tank heat loss coefficient
        (100, 500)    # U_cond: condenser heat transfer coefficient
    ]
    
    # run differential evolution to optimise parameters
    result = differential_evolution(objective_function, bounds, strategy='best1bin', maxiter=1000, tol=1e-6)
    
    # extract the best parameters and metric
    best_params = result.x
    best_metric = result.fun
    
    # print the results
    print("Optimal parameters:", best_params)

if __name__ == "__main__":
    # set up constant parameters for the system
    T_cond = 343.15  # condenser temperature (Kelvin)
    c_t = 837200  # thermal capacity of the tank (J/K)
    initial_tank_temp = 45 + 273.15  # initial tank temperature (45°C)
    
    main()
