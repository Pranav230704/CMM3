import numpy as np
import yaml
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
import tkinter as tk
from tkinter import ttk
from datetime import datetime
from meteostat import Point, Hourly
from scipy.optimize import curve_fit
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Define coordinates for additional cities
cities = {
    'Edinburgh': Point(55.9533, -3.1883),
    'Oslo': Point(59.9139, 10.7522),
    'Toronto': Point(43.65107, -79.347015),
    'Nairobi': Point(-1.286389, 36.817223),
    'Rio': Point(-22.9068, -43.1729),
    'Cape Town': Point(-33.9249, 18.4241)
}

# Define T_amb_list as a global variable
T_amb_list = []

# Function to get temperature for selected city
def get_temperature_for_city(city_name):
    global T_amb_list  # Declare as global to update the global variable
    location = cities.get(city_name)
    if location:
        # Set the time period for data retrieval
        start = datetime(2023, 1, 1, 0)  # Start time
        end = datetime(2023, 1, 2, 0)  # End time (24-hour period)
        # Fetch hourly temperature data
        data = Hourly(location, start, end)
        data = data.fetch()
        T_amb_list = data['temp'].tolist()
        return T_amb_list
    else:
        return []

# Function to update temperature based on selected city
def update_temperature():
    selected_city = city_var.get()
    global T_amb_list  # Declare as global to use the updated list
    T_amb_list = get_temperature_for_city(selected_city)
    if T_amb_list:
        print(f"Temperature data for {selected_city} fetched successfully!")
    else:
        print(f"Failed to fetch temperature data for {selected_city}.")

# Open cop yaml file
file_path1 = r'/Users/pranav/Downloads/heat_pump_cop_synthetic_full.yaml'
with open(file_path1, 'r') as file:
    cop_yaml = yaml.safe_load(file)

cop_temp = []
cop_cop = []

# Extract data from yaml file
for i in cop_yaml['heat_pump_cop_data']:
    cop_temp.append(i['outdoor_temp_C'])
    cop_cop.append(i['COP_noisy'])

class Heat_system:
    
    def __init__(self, Aw, Uw, Ar, Ur, T_amb_list, T_sp, U_cond, T_cond, U_tank, A_tank, c_t):
        self.Aw = Aw
        self.Uw = Uw
        self.Ar = Ar
        self.Ur = Ur
        self.T_amb_list = T_amb_list
        self.T_sp = T_sp
        self.U_cond = U_cond
        self.T_cond = T_cond
        self.U_tank = U_tank
        self.A_tank = A_tank
        self.c_t = c_t
        self.pump_on = False
        self.real_cop = []  # Store calculated COP values for averaging
        self.cop_values = []  # Store COP values at t_eval points

    def Q_load(self):
        Q_loads = []
        for Tamb in self.T_amb_list:
            Q_load = (self.Aw * self.Uw * (Tamb + 273 - self.T_sp) + self.Ar * self.Ur * (Tamb + 273 - self.T_sp)) * -1
            Q_loads.append(Q_load)
        return Q_loads

    # COP function based on curve fitting
    def cop(self, T_amb, a, b):
        delta_T = 60 - T_amb
        return a + b / delta_T

    # Fit COP parameters using the provided data once
    popt, pcov = curve_fit(lambda T, a, b: a + b / (60 - T), cop_temp, cop_cop)
    a, b = popt  # Obtained parameters for COP calculation

    def Q_hp(self, T_tank, T_amb):
        if T_tank >= 60 + 273.15:
            self.pump_on = False
        elif T_tank <= 40 + 273.15:
            self.pump_on = True

        if self.pump_on:
            return 1.11 * (self.U_cond * (self.T_cond - T_tank))
        else:
            return 0

    def tank_temperature_ode(self, t, T_tank):
        T_amb = np.interp(t, np.linspace(0, 86400, len(self.T_amb_list)), self.T_amb_list)
        Load = np.interp(t, np.linspace(0, 86400, len(self.Q_load())), self.Q_load())
        Q_hp = self.Q_hp(T_tank, T_amb)
        Q_loss = self.U_tank * self.A_tank * (T_tank - T_amb)
        
        dTdt = (Q_hp - Load - Q_loss[0]) / self.c_t
        return dTdt

    def solve_tank_temperature(self, initial_tank_temp, total_time=86400, time_points=1000):
        t_eval = np.linspace(0, total_time, time_points)
        
        # Interpolate T_amb_list to match the evaluation points
        T_amb_interpolated = np.interp(t_eval, np.linspace(0, 86400, len(self.T_amb_list)), self.T_amb_list)

        # Solve ODE at specified evaluation points
        solution = solve_ivp(self.tank_temperature_ode, [0, total_time], [initial_tank_temp], t_eval=t_eval, method="RK45", max_step=100)

        # Calculate COP at each t_eval point based on T_amb
        self.cop_values = [self.cop(T_amb, self.a, self.b) for T_amb in T_amb_interpolated]

        # Calculate total energy consumption
        Q_hp_values = [self.Q_hp(T_tank, T_amb) for T_tank, T_amb in zip(solution.y[0], T_amb_interpolated)]
        Q_hp_total = np.trapz(Q_hp_values, solution.t)  # Total energy consumption
        
        # Calculate average COP
        avg_cop = np.mean(self.real_cop) if self.real_cop else 0  # Average COP

        T_tank_values = solution.y[0] - 273.15  # Convert tank temperature to Celsius
        time_values = solution.t

        return time_values, T_tank_values, Q_hp_total, avg_cop

# Function to display plot in the Tkinter GUI
def display_plot_in_gui(time_values, T_tank_values):
    fig, ax = plt.subplots(figsize=(8, 4))
    ax.plot(time_values / 3600, T_tank_values, label="Tank Temperature", linewidth=1.5)
    ax.axhline(y=60, color="red", linestyle="--", label="Heat Pump Off Threshold (60°C)")
    ax.axhline(y=40, color="blue", linestyle="--", label="Heat Pump On Threshold (40°C)")
    ax.set_xlabel("Time (hours)")
    ax.set_ylabel("Tank Temperature (°C)")
    ax.set_title("Tank Temperature Over Time")
    ax.legend(loc="upper right")
    ax.grid(True)
    ax.set_ylim(min(T_tank_values) - 5, max(T_tank_values) + 5)  # Adjust y-axis for extra space

    # Embed the figure in Tkinter
    canvas = FigureCanvasTkAgg(fig, master=frame_plot)
    canvas.draw()
    canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

# Updated run_simulation function to display plot in the GUI
def run_simulation(Aw, Uw, Ar, Ur, T_sp, U_cond, T_cond, U_tank, A_tank, c_t, display_type):
    # Ensure that T_amb_list is updated before passing it to the Heat_System
    if not T_amb_list:
        print("Temperature data not available!")
        return

    heat_system = Heat_system(Aw, Uw, Ar, Ur, T_amb_list, T_sp, U_cond, T_cond, U_tank, A_tank, c_t)
    initial_tank_temp = 318.15  # Initial tank temperature in K
    time_values, T_tank_values, Q_hp_total, avg_cop = heat_system.solve_tank_temperature(initial_tank_temp)
    
    if display_type == 'Temperature':
        # Clear the frame_plot first to avoid overlapping plots
        for widget in frame_plot.winfo_children():
            widget.destroy()
        
        # Display the plot in the GUI
        display_plot_in_gui(time_values, T_tank_values)

# Tkinter setup
root = tk.Tk()
root.title("Heat Pump Simulation")

# Frame for displaying the plot in the Tkinter window
frame_plot = tk.Frame(root)
frame_plot.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

# Additional UI setup
# (Include all the remaining code for setting up the user manual, parameters frame, and other components here)


# Button to run the simulation, now displaying the plot in the GUI
tk.Button(frame_simulation, text="Run Simulation", command=lambda: run_simulation(
    float(Aw_entry.get()), float(Uw_entry.get()), float(Ar_entry.get()), float(Ur_entry.get()), 
    float(T_sp_entry.get()), float(U_cond), float(T_cond), float(U_tank), float(A_tank_entry.get()), 
    float(c_t), display_type='Temperature')).pack(pady=10)

# Start the main loop
root.mainloop()
