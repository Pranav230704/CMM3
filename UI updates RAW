import tkinter as tk
from tkinter import ttk
from datetime import datetime
from meteostat import Point, Hourly

# Define coordinates for additional cities
cities = {
    'Edinburgh': Point(55.9533, -3.1883),
    'Oslo': Point(59.9139, 10.7522),
    'Toronto': Point(43.65107, -79.347015),
    'Nairobi': Point(-1.286389, 36.817223),
    'Rio': Point(-22.9068, -43.1729),
    'Cape Town': Point(-33.9249, 18.4241)
}

# Define T_amb_list as a global variable
T_amb_list = []

# Function to get temperature for selected city
def get_temperature_for_city(city_name):
    global T_amb_list  # Declare as global to update the global variable
    location = cities.get(city_name)
    if location:
        # Set the time period for data retrieval
        start = datetime(2023, 1, 1, 0)  # Start time
        end = datetime(2023, 1, 2, 0)  # End time (24-hour period)
        # Fetch hourly temperature data
        data = Hourly(location, start, end)
        data = data.fetch()
        T_amb_list = data['temp'].tolist()
        return T_amb_list
    else:
        return []

# Function to update temperature based on selected city
def update_temperature():
    selected_city = city_var.get()
    global T_amb_list  # Declare as global to use the updated list
    T_amb_list = get_temperature_for_city(selected_city)
    if T_amb_list:
        print(f"Temperature data for {selected_city} fetched successfully!")
    else:
        print(f"Failed to fetch temperature data for {selected_city}.")

# Settings for building types
settings = {
    'A': {'Aw': 85, 'Uw': 0.4, 'Ar': 80, 'Ur': 0.15, 'T_sp': 288.15,
          'A_tank': 1, 'mass_of_water': 200, 'initial_tank_temp': 200,
          'on_threshold': 318.15, 'off_threshold': 333.15, 'City': 'Oslo'},
    'B': {'Aw': 135, 'Uw': 0.6, 'Ar': 120, 'Ur': 0.25, 'T_sp': 298.15,
          'A_tank': 1, 'mass_of_water': 200, 'initial_tank_temp': 200,
          'on_threshold': 318.15, 'off_threshold': 333.15, 'City': 'Cape Town'},
    'C': {'Aw': 180, 'Uw': 0.8, 'Ar': 160, 'Ur': 0.3, 'T_sp': 303.15,
          'A_tank': 1, 'mass_of_water': 200, 'initial_tank_temp': 200,
          'on_threshold': 318.15, 'off_threshold': 333.15, 'City': 'Nairobi'},
    'D': {'Aw': 132, 'Uw': 0.51, 'Ar': 120, 'Ur': 0.18, 'T_sp': 293.15,
          'A_tank': 1, 'mass_of_water': 200, 'initial_tank_temp': 200,
          'on_threshold': 318.15, 'off_threshold': 333.15, 'City': 'Edinburgh'},
}

root = tk.Tk()
root.title("Heat Pump Simulation")
root.geometry("900x600")

# Frame for User Manual with Show/Hide functionality
def toggle_manual():
    if manual_text.winfo_ismapped():
        manual_text.pack_forget()
    else:
        manual_text.pack()

manual_button = tk.Button(root, text="Show/Hide User Manual", command=toggle_manual)
manual_button.pack(side=tk.RIGHT, padx=10, pady=10)

manual_text = tk.Text(root, height=20, width=40, wrap=tk.WORD, relief=tk.SUNKEN, borderwidth=2)
manual_text.insert(tk.END, """Heat Pump Simulation User Manual:
1) Select a preset building type to load parameters or adjust inputs manually.
2) Use "Update Temperature" to fetch outside temperature for the selected city.
3) Run the simulation to analyze tank temperature and performance metrics.
4) Use "Select Metric" to view specific performance data.
""")
manual_text.config(state=tk.DISABLED)

# Frame for Parameters
frame_params = tk.Frame(root)
frame_params.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=20, pady=20)

# Separate frames for each category
building_params_frame = tk.LabelFrame(frame_params, text="Building Parameters", padx=10, pady=10)
building_params_frame.grid(row=0, column=0, padx=5, pady=5, sticky="ew")

tank_params_frame = tk.LabelFrame(frame_params, text="Tank Parameters", padx=10, pady=10)
tank_params_frame.grid(row=1, column=0, padx=5, pady=5, sticky="ew")

control_params_frame = tk.LabelFrame(frame_params, text="Simulation Control", padx=10, pady=10)
control_params_frame.grid(row=2, column=0, padx=5, pady=5, sticky="ew")

# Define parameter entries
# Building Parameters
tk.Label(building_params_frame, text="Wall Area (m²):").grid(row=0, column=0, sticky='e')
Aw_entry = tk.Entry(building_params_frame, width=20)
Aw_entry.insert(0, "0")
Aw_entry.grid(row=0, column=1)

tk.Label(building_params_frame, text="Wall U-value (W/m²K):").grid(row=1, column=0, sticky='e')
Uw_entry = tk.Entry(building_params_frame, width=20)
Uw_entry.insert(0, "0")
Uw_entry.grid(row=1, column=1)

tk.Label(building_params_frame, text="Roof Area (m²):").grid(row=2, column=0, sticky='e')
Ar_entry = tk.Entry(building_params_frame, width=20)
Ar_entry.insert(0, "0")
Ar_entry.grid(row=2, column=1)

tk.Label(building_params_frame, text="Roof U-value (W/m²K):").grid(row=3, column=0, sticky='e')
Ur_entry = tk.Entry(building_params_frame, width=20)
Ur_entry.insert(0, "0")
Ur_entry.grid(row=3, column=1)

# Tank Parameters
tk.Label(tank_params_frame, text="Tank Surface Area (m²):").grid(row=0, column=0, sticky='e')
A_tank_entry = tk.Entry(tank_params_frame, width=20)
A_tank_entry.insert(0, "0")
A_tank_entry.grid(row=0, column=1)

tk.Label(tank_params_frame, text="Mass of Water in Tank (kg):").grid(row=1, column=0, sticky='e')
mass_of_water_entry = tk.Entry(tank_params_frame, width=20)
mass_of_water_entry.insert(0, "0")
mass_of_water_entry.grid(row=1, column=1)

tk.Label(tank_params_frame, text="Initial Tank Temperature (K):").grid(row=2, column=0, sticky='e')
initial_tank_temp_entry = tk.Entry(tank_params_frame, width=20)
initial_tank_temp_entry.insert(0, "0")
initial_tank_temp_entry.grid(row=2, column=1)

# Simulation Control Parameters
tk.Label(control_params_frame, text="Set Point Temperature (K):").grid(row=0, column=0, sticky='e')
T_sp_entry = tk.Entry(control_params_frame, width=20)
T_sp_entry.insert(0, "0")
T_sp_entry.grid(row=0, column=1)

tk.Label(control_params_frame, text="Heat Pump On Threshold (K):").grid(row=1, column=0, sticky='e')
on_threshold_entry = tk.Entry(control_params_frame, width=20)
on_threshold_entry.insert(0, "0")
on_threshold_entry.grid(row=1, column=1)

tk.Label(control_params_frame, text="Heat Pump Off Threshold (K):").grid(row=2, column=0, sticky='e')
off_threshold_entry = tk.Entry(control_params_frame, width=20)
off_threshold_entry.insert(0, "0")
off_threshold_entry.grid(row=2, column=1)

tk.Label(control_params_frame, text="Select City:").grid(row=3, column=0, sticky='e')
city_var = tk.StringVar(value="Edinburgh")
city_dropdown = ttk.Combobox(control_params_frame, textvariable=city_var, values=list(cities.keys()))
city_dropdown.grid(row=3, column=1)

# Button to update temperature
tk.Button(frame_params, text="Update Temperature", command=update_temperature).grid(row=11, column=0, columnspan=2, pady=10)

# Function to set parameters from the dropdown menu
def set_parameters(params):
    Aw_entry.delete(0, tk.END)
    Aw_entry.insert(0, params['Aw'])
    Uw_entry.delete(0, tk.END)
    Uw_entry.insert(0, params['Uw'])
    Ar_entry.delete(0, tk.END)
    Ar_entry.insert(0, params['Ar'])
    Ur_entry.delete(0, tk.END)
    Ur_entry.insert(0, params['Ur'])
    T_sp_entry.delete(0, tk.END)
    T_sp_entry.insert(0, params['T_sp'])
    A_tank_entry.delete(0, tk.END)
    A_tank_entry.insert(0, params['A_tank'])
    mass_of_water_entry.delete(0, tk.END)
    mass_of_water_entry.insert(0, params['mass_of_water'])
    initial_tank_temp_entry.delete(0, tk.END)
    initial_tank_temp_entry.insert(0, params['initial_tank_temp'])
    on_threshold_entry.delete(0, tk.END)
    on_threshold_entry.insert(0, params['on_threshold'])
    off_threshold_entry.delete(0, tk.END)
    off_threshold_entry.insert(0, params['off_threshold'])
    city_var.set(params['City'])  # Update city selection

# Dropdown for selecting building type
def create_parameter_dropdown(frame):
    dropdown = ttk.Combobox(frame, values=list(settings.keys()))
    dropdown.grid(pady=5, columnspan=2)

    def on_dropdown_select(event):
        selected_option = dropdown.get()
        if selected_option in settings:
            params = settings[selected_option]
            set_parameters(params)

    dropdown.bind("<<ComboboxSelected>>", on_dropdown_select)

param_dropdown_frame = tk.Frame(frame_params)
param_dropdown_frame.grid(row=3, column=0, columnspan=2, pady=10)
create_parameter_dropdown(param_dropdown_frame)

# Start the main loop
root.mainloop()
